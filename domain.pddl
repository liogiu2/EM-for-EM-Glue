(define (domain camelotdomain)
    (:requirements :typing :negative-preconditions :universal-preconditions)
    (:types
    general other
    position item character - general
    furniture entrypoint location - position
    player - character
    )
    (:predicates 
        (at ?g - general ?p - position)
        (in ?g - general ?l - location)
        (equip ?i - item ?c - character)
        (adjacent ?e - entrypoint ?e1 - entrypoint)
        (bleeding ?c - character)
        (spell-hit ?c - character)
        (is_open ?f - furniture)
        (alive ?c - character)
        (kneeling ?c - character)
        (can_open ?f - furniture)
        (can_close ?f - furniture)
        (has_surface ?f - furniture)
        (stored ?i - item ?f - furniture)
    )
            (:action move-between-location
        :parameters (?who - character ?from - location ?to - location ?entryfrom - entrypoint ?entryto - entrypoint )
        :precondition         (and (in ?who ?from)
(alive ?who)
(adjacent ?entryfrom ?entryto)
(at ?who ?entryfrom)
)
        :effect         (and (in ?who ?to)
        (not (in ?who ?from)
)
        (not (at ?who ?entryfrom)
)
(at ?who ?entryto)
)
    )

            (:action move-within-location
        :parameters (?who - character ?from - position ?to - position )
        :precondition         (and (at ?who ?from)
(alive ?who)
)
        :effect         (and (at ?who ?to)
        (not (at ?who ?from)
)
)
    )

            (:action attack-true-hit
        :parameters (?who - character ?whom - character ?room - position )
        :precondition         (and (at ?who ?room)
(at ?whom ?room)
(alive ?who)
        (not (alive ?whom)
)
)
        :effect         (and (bleeding ?whom)
)
    )

            (:action attack-false-hit
        :parameters (?who - character ?whom - character ?room - position )
        :precondition         (and (at ?who ?room)
(at ?whom ?room)
(alive ?who)
(alive ?whom)
)
        :effect         (and )
    )

            (:action bash
        :parameters (?who - character ?where - position ?furniture - furniture )
        :precondition         (and (at ?who ?where)
(at ?furniture ?where)
(alive ?who)
)
        :effect         (and )
    )

            (:action cast-no-target
        :parameters (?caster - character )
        :precondition         (and (alive ?caster)
)
        :effect         (and )
    )

            (:action cast-with-target
        :parameters (?caster - character ?target - character ?position - position )
        :precondition         (and (at ?caster ?position)
(at ?target ?position)
(alive ?caster)
(alive ?target)
)
        :effect         (and (at ?caster ?position)
(at ?target ?position)
(spell-hit ?target)
)
    )

            (:action clap
        :parameters (?clapper - character )
        :precondition         (and (alive ?clapper)
)
        :effect         (and )
    )

            (:action closefurniture
        :parameters (?c - character ?f - furniture ?r - position )
        :precondition         (and (at ?c ?r)
(at ?f ?r)
(alive ?c)
(is_open ?f)
)
        :effect         (and         (not (is_open ?f)
)
)
    )

            (:action dance
        :parameters (?dancer - character )
        :precondition         (and (alive ?dancer)
)
        :effect         (and )
    )

            (:action dancetogether
        :parameters (?d - character ?d1 - character ?l - position )
        :precondition         (and (at ?d ?l)
(at ?d1 ?l)
(alive ?d)
(alive ?d1)
)
        :effect         (and )
    )

            (:action die
        :parameters (?c - character )
        :precondition         (and (alive ?c)
)
        :effect         (and         (not (alive ?c)
)
)
    )

            (:action draw
        :parameters (?c - character ?i - item ?l - position )
        :precondition         (and (alive ?c)
(at ?c ?l)
        ( forall (?character - character)        (not (equip ?i ?character)
)
)
)
        :effect         (and (equip ?i ?c)
        (not (at ?i ?l)
)
)
    )

            (:action drink
        :parameters (?c - character ?i - item ?l - position )
        :precondition         (and (alive ?c)
(at ?c ?l)
(at ?i ?l)
)
        :effect         (and )
    )

            (:action enter
        :parameters (?c - character ?l - position )
        :precondition         (and (alive ?c)
        (not (at ?c ?l)
)
)
        :effect         (and (at ?c ?l)
)
    )

            (:action exit
        :parameters (?c - character ?l - position )
        :precondition         (and (alive ?c)
(at ?c ?l)
)
        :effect         (and         (not (at ?c ?l)
)
)
    )

            (:action give
        :parameters (?giver - character ?receiver - character ?item - item ?l - position )
        :precondition         (and (alive ?giver)
(alive ?receiver)
(equip ?item ?giver)
(at ?giver ?l)
(at ?receiver ?l)
)
        :effect         (and         (not (equip ?item ?giver)
)
(equip ?item ?receiver)
)
    )

            (:action kneel
        :parameters (?character - character )
        :precondition         (and         (not (kneeling ?character)
)
(alive ?character)
)
        :effect         (and (kneeling ?character)
)
    )

            (:action openfurniture
        :parameters (?character - character ?furniture - furniture ?position - position )
        :precondition         (and (alive ?character)
(at ?character ?position)
        (not (is_open ?furniture)
)
(can_open ?furniture)
)
        :effect         (and (is_open ?furniture)
)
    )

            (:action pickup
        :parameters (?character - character ?furniture - furniture ?position - position ?item - item )
        :precondition         (and (alive ?character)
(at ?furniture ?position)
(at ?character ?position)
(stored ?item ?furniture)
        ( forall (?characters - character)        (not (equip ?item ?characters)
)
)
        (or (has_surface ?furniture)
        (and (can_open ?furniture)
(is_open ?furniture)
)
)
)
        :effect         (and         (not (stored ?item ?furniture)
)
(equip ?item ?character)
)
    )

            (:action pocket
        :parameters ()
        :precondition         (and )
        :effect         (and )
    )

)